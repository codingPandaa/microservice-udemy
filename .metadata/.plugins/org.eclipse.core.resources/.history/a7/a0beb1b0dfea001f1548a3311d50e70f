package com.ems.employeeservice.service.impl;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.client.WebClient;

import com.ems.employeeservice.dto.APIResponseDto;
import com.ems.employeeservice.dto.DepartmentDto;
import com.ems.employeeservice.dto.EmployeeDto;
import com.ems.employeeservice.dto.OrganizationDto;
import com.ems.employeeservice.entity.Employee;
import com.ems.employeeservice.exception.ResourceNotFoundException;
import com.ems.employeeservice.mapper.EmployeeMapper;
import com.ems.employeeservice.repo.EmployeeRepo;
import com.ems.employeeservice.service.EmployeeService;

import io.github.resilience4j.circuitbreaker.annotation.CircuitBreaker;
import lombok.AllArgsConstructor;

@Service
@AllArgsConstructor
public class EmployeeServiceImpl implements EmployeeService {

	private EmployeeRepo employeeRepo;

//	private RestTemplate restTemplate;
	private WebClient webClient;
//	private APIClient apiClient;

	@Override
	public EmployeeDto createEmployee(EmployeeDto employeeDto) {

		Employee employee = EmployeeMapper.mapToEntity(employeeDto);

		Employee savedEmployee = employeeRepo.save(employee);

		return EmployeeMapper.mapToDto(savedEmployee);
	}

	@CircuitBreaker(name = "${spring.application.name}", fallbackMethod = "getDefaultDepartment")
	@Override
	public APIResponseDto getEmployeeById(Long employeeId) {

		Employee employee = employeeRepo.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee", "id", employeeId));

		// synchronous communication using rest template

//		ResponseEntity<DepartmentDto> entity = restTemplate.getForEntity(
//				"http://localhost:8080/api/departments/code/" + employee.getDepartmentCode(), DepartmentDto.class);
//
//		DepartmentDto departmentDto = entity.getBody();

		// asynchronous communication using web client

		DepartmentDto departmentDto = webClient.get().uri("http://localhost:8080/api/departments/code/").retrieve()
				.bodyToMono(DepartmentDto.class).block();

//		DepartmentDto departmentDto = apiClient.getDeparmentByCode(employee.getDepartmentCode());

		OrganizationDto organizationDto = webClient.get().uri("http://localhost:8083/api/organizations/code").retrieve()
				.bodyToMono(OrganizationDto.class).block();

		EmployeeDto employeeDto = EmployeeMapper.mapToDto(employee);

		APIResponseDto apiResponseDto = new APIResponseDto();
		apiResponseDto.setEmployeeDto(employeeDto);
		apiResponseDto.setDepartmentDto(departmentDto);

		return apiResponseDto;
	}

	@Override
	public List<EmployeeDto> getAllEmployees() {

		List<Employee> employees = employeeRepo.findAll();

		return employees.stream().map(employee -> EmployeeMapper.mapToDto(employee)).collect(Collectors.toList());
	}

	@Override
	public EmployeeDto updateEmployee(Long employeeId, EmployeeDto employeeDto) {

		Employee employee = employeeRepo.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee", "id", employeeId));

		employee.setFirstName(employeeDto.getFirstName());
		employee.setLastName(employeeDto.getLastName());
		employee.setEmail(employeeDto.getEmail());

		Employee savedEmployee = employeeRepo.save(employee);

		return EmployeeMapper.mapToDto(savedEmployee);
	}

	@Override
	public void deleteEmployee(Long employeeId) {

		Employee employee = employeeRepo.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee", "id", employeeId));

		employeeRepo.deleteById(employeeId);
	}

	public APIResponseDto getDefaultDepartment(Long employeeId, Exception exception) {

		Employee employee = employeeRepo.findById(employeeId)
				.orElseThrow(() -> new ResourceNotFoundException("Employee", "id", employeeId));

		DepartmentDto departmentDto = new DepartmentDto();

		departmentDto.setDepartmentName("R&D Department");
		departmentDto.setDepartmentDescription("Research and Development Department");
		departmentDto.setDepartmentCode("RD001");

		EmployeeDto employeeDto = EmployeeMapper.mapToDto(employee);

		APIResponseDto apiResponseDto = new APIResponseDto();
		apiResponseDto.setEmployeeDto(employeeDto);
		apiResponseDto.setDepartmentDto(departmentDto);

		return apiResponseDto;
	}

}
